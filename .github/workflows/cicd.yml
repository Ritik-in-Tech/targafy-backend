name: Deploy Targafy-Backend

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: "${{ secrets.DOCKER_USERNAME }}"
          password: "${{ secrets.DOCKER_PASSWORD }}"

      - name: Build Docker Image
        run: docker build -t ritik819/targafybackend .

      - name: Publish Image to Docker Hub
        run: docker push ritik819/targafybackend:latest

  deploy:
    needs: build
    runs-on: self-hosted
    steps:
      - name: Stop and Remove Existing Container (if exists)
        run: |
          sudo docker stop targafy-backend-container || true
          sudo docker rm targafy-backend-container || true

      - name: Remove old images
        run: |
          sudo docker image prune -af --filter "label=com.docker.compose.project=targafybackend"
          sudo docker rmi ritik819/targafybackend:latest || true

      - name: Pull Image from Docker Hub
        run: sudo docker pull ritik819/targafybackend:latest

      - name: Run Docker Container
        run: |
          sudo docker run -d -p 443:443 -p 80:80 --name targafy-backend-container \
              -e MONGODB_PASS='${{ secrets.MONGODB_PASS }}' \
              -e NODE_ENV='${{ secrets.NODE_ENV }}' \
              -e FCM_ACCESS_TOKEN='${{ secrets.FCM_ACCESS_TOKEN }}' \
              -e ACCESS_TOKEN_SECRET='${{ secrets.ACCESS_TOKEN_SECRET }}' \
              -e ACCESS_TOKEN_SECRET_ADMIN='${{secrets.ACCESS_TOKEN_SECRET_ADMIN}}' \
              -e ACCESS_TOKEN_EXPIRY='${{ secrets.ACCESS_TOKEN_EXPIRY }}' \
              -e AUTHKEY='${{ secrets.AUTHKEY }}' \
              -e FCM_API_KEY='${{ secrets.FCM_API_KEY }}' \
              -e AWS_ACCESS_KEY='${{secrets.AWS_ACCESS_KEY}}' \
              -e AWS_SECRET_KEY='${{secrets.AWS_SECRET_KEY}}' \
              -e HTTPS_PORT='${{secrets.HTTPS_PORT}}' \
              -e HTTP_PORT='${{secrets.HTTP_PORT}}' \
              ritik819/targafybackend:latest

      - name: Clean up old images
        run: sudo docker image prune -af
